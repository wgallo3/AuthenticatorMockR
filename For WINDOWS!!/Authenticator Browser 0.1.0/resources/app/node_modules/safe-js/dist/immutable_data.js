'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dropWriter = exports.dropReader = exports.closeWriter = exports.write = exports.read = exports.getWriterHandle = exports.getReaderHandle = exports.manifest = undefined;

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IMMUT_DATA_ENDPOINT = _utils.SERVER + 'immutable-data/';

var manifest = exports.manifest = {
  getReaderHandle: 'promise',
  getWriterHandle: 'promise',
  read: 'promise',
  write: 'promise',
  closeWriter: 'promise',
  dropReader: 'promise',
  dropWriter: 'promise'
};

var getReaderHandle = exports.getReaderHandle = function getReaderHandle(token, handleId) {
  var url = IMMUT_DATA_ENDPOINT + 'reader/' + handleId;
  var payload = {
    method: 'GET'
  };
  if (token) {
    payload.headers = {
      Authorization: 'Bearer ' + token
    };
  }
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Get Immutable Data reader handle failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return (0, _utils.parseResponse)(response);
  });
};

var getWriterHandle = exports.getWriterHandle = function getWriterHandle(token) {
  var url = IMMUT_DATA_ENDPOINT + 'writer';
  var payload = {
    method: 'GET',
    headers: {
      Authorization: 'Bearer ' + token
    }
  };
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Get Immutable Data writer handle failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return (0, _utils.parseResponse)(response);
  });
};

var read = exports.read = function read(token, handleId) {
  var url = '' + IMMUT_DATA_ENDPOINT + handleId;
  var payload = {
    method: 'GET'
  };
  if (token) {
    payload.headers = {
      Authorization: 'Bearer ' + token
    };
  }
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Read Immutable Data failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return response.buffer();
  });
};

var write = exports.write = function write(token, handleId, dataBuffer) {
  var url = '' + IMMUT_DATA_ENDPOINT + handleId;
  var payload = {
    method: 'POST',
    headers: {
      Authorization: 'Bearer ' + token,
      'Content-Length': dataBuffer.length,
      'Content-Type': 'text/plain'
    },
    body: dataBuffer
  };
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Write Immutable Data failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return response;
  });
};

var closeWriter = exports.closeWriter = function closeWriter(token, handleId, cipherOptsHandle) {
  var url = '' + IMMUT_DATA_ENDPOINT + handleId + '/' + cipherOptsHandle;
  var payload = {
    method: 'PUT',
    headers: {
      Authorization: 'Bearer ' + token
    }
  };
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Close Immutable Data writer failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return (0, _utils.parseResponse)(response);
  });
};

var dropReader = exports.dropReader = function dropReader(token, handleId) {
  var url = IMMUT_DATA_ENDPOINT + 'reader/' + handleId;
  var payload = {
    method: 'DELETE'
  };
  if (token) {
    payload.headers = {
      Authorization: 'Bearer ' + token
    };
  }
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Drop Immutable Data reader failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return response;
  });
};

var dropWriter = exports.dropWriter = function dropWriter(token, handleId) {
  var url = IMMUT_DATA_ENDPOINT + 'writer/' + handleId;
  var payload = {
    method: 'DELETE',
    headers: {
      Authorization: 'Bearer ' + token
    }
  };
  return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
    if (response.status !== 200) {
      throw new Error({ error: 'Drop Immutable Data writer failed with status ' + response.status + ' ' + response.statusText,
        errorPayload: payload,
        errorUrl: url
      });
    }
    return response;
  });
};