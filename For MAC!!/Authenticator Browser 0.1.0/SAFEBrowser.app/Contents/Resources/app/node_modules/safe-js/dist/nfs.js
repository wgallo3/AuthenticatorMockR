'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.renameFile = exports.renameDir = exports.rename = exports.moveFile = exports.moveDir = exports.getFileMetadata = exports.getFile = exports.getDir = exports.deleteFile = exports.deleteDir = exports.createOrUpdateFile = exports.createFile = exports.createDir = exports.manifest = undefined;

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
* Manifest for Beaker: 
* https://github.com/pfrazee/beaker/blob/master/doc/authoring-plugins.md#api-manifests
*/
var manifest = exports.manifest = {
    createDir: 'promise',
    createFile: 'promise',
    createOrUpdateFile: 'promise',
    deleteDir: 'promise',
    deleteFile: 'promise',
    getDir: 'promise',
    getFile: 'promise',
    getFileMetadata: 'promise',
    moveFile: 'promise',
    moveDir: 'promise',
    // modifyFileContent       : 'promise',
    rename: 'promise',
    renameDir: 'promise',
    renameFile: 'promise'
};

// create new directory
var createDir = exports.createDir = function createDir(token, dirPath, isPrivate, userMetadata) {
    var isPathShared = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    dirPath = dirPath[0] === '/' ? dirPath.slice(1) : dirPath;
    var url = _utils.SERVER + 'nfs/directory/' + rootPath + '/' + dirPath;
    var payload = {
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            isPrivate: isPrivate,
            metadata: userMetadata
        })
    };

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

var createFile = exports.createFile = function createFile(token, filePath, dataToWrite) {
    var dataType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'text/plain';
    var dataLength = arguments[4];
    var metadata = arguments[5];
    var isPathShared = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/file/' + rootPath + '/' + filePath;
    var payload = {
        method: 'POST',
        headers: {
            Authorization: 'Bearer ' + token,
            'Content-Length': dataLength || dataToWrite.length,
            'Content-Type': dataType

        },
        body: dataToWrite
    };

    if (metadata) {
        payload.headers.Metadata = metadata;
    }

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

var createOrUpdateFile = exports.createOrUpdateFile = function createOrUpdateFile(token, filePath, dataToWrite) {
    var dataType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'text/plain';
    var dataLength = arguments[4];
    var metadata = arguments[5];
    var isPathShared = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;

    return getFileMetadata(token, filePath, isPathShared).then(function (headers) {
        return deleteFile(token, filePath, isPathShared).then(function (success) {
            if (success) {
                return createFile(token, filePath, dataToWrite, dataType, dataLength, metadata, isPathShared);
            }
        });
    }).catch(function (response) {
        //file doesnt exist 
        if (response.status === 404) {
            return createFile(token, filePath, dataToWrite, dataType, dataLength, metadata, isPathShared);
        } else {
            return Promise.reject((0, _utils.parseResponse)(response));
        }
    });
};

var deleteDir = exports.deleteDir = function deleteDir(token, dirPath) {
    var isPathShared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/directory/' + rootPath + '/' + dirPath;
    var payload = {
        method: 'DELETE',
        headers: {
            Authorization: 'Bearer ' + token
        }
    };
    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

var deleteFile = exports.deleteFile = function deleteFile(token, filePath) {
    var isPathShared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/file/' + rootPath + '/' + filePath;
    var payload = {
        method: 'DELETE',
        headers: {
            Authorization: 'Bearer ' + token
        }
    };
    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

// get specific directory
var getDir = exports.getDir = function getDir(token, dirPath) {
    var isPathShared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/directory/' + rootPath + '/' + dirPath;
    var payload = {
        method: 'GET',
        headers: {
            'Authorization': 'Bearer ' + token
        }
    };
    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.parseResponse)(response);
    });
};

var validResponseParsing = ['buffer', 'blob', 'json', 'text'];
var getFile = exports.getFile = function getFile(token, filePath) {
    var responseParsing = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'text';
    var isPathShared = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;


    if (!validResponseParsing.includes(responseParsing)) {
        return Promise.reject(new Error('invalid response parsing method, should be one of: ' + validResponseParsing.join()));
    }

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/file/' + rootPath + '/' + filePath;
    var payload = {
        headers: {
            'Authorization': 'Bearer ' + token
        }
    };

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {

        if (!response.ok) {
            return (0, _utils.parseResponse)(response);
        }

        if (!responseParsing) {
            return response;
        } else {
            return response[responseParsing]();
        }
    });
};

var getFileMetadata = exports.getFileMetadata = function getFileMetadata(token, filePath) {
    var isPathShared = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + 'nfs/file/' + rootPath + '/' + filePath;
    var payload = {
        method: 'HEAD',
        headers: {
            'Authorization': 'Bearer ' + token
        }
    };

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        if (response.status === 200) {
            return response.headers;
        } else {
            return Promise.reject(response);
        }
    });
};

var moveDir = exports.moveDir = function moveDir(token, srcRootPath, srcPath, destRootPath, destPath) {
    var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'move';

    if (!action.match(/move|copy/)) {
        return Promise.reject('invalid action for move, was: ', action);
    }

    return move('dir', token, srcRootPath, srcPath, destRootPath, destPath, action);
};

var moveFile = exports.moveFile = function moveFile(token, srcRootPath, srcPath, destRootPath, destPath) {
    var action = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'move';

    if (!action.match(/move|copy/)) {
        return Promise.reject('invalid action for move, was: ', action);
    }

    return move('file', token, srcRootPath, srcPath, destRootPath, destPath, action);
};

//action is move or copy
var move = function move(fileOrDir, token, srcRootPath, srcPath, destRootPath, destPath) {
    var action = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'move';

    if (!fileOrDir.match(/file|dir/)) {
        return Promise.reject('invalid target for move, should be "file" or "dir", was: ', fileOrDir);
    }

    var url = _utils.SERVER + 'nfs/movefile';

    if (fileOrDir === 'dir') {
        url = _utils.SERVER + 'nfs/movedir';
    }

    var payload = {
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'

        },
        body: JSON.stringify({
            "srcRootPath": srcRootPath,
            "srcPath": srcPath,
            "destRootPath": destRootPath,
            "destPath": destPath,
            "action": action
        })
    };

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

var rename = exports.rename = function rename(token, path, newName, isFile, metadata) {
    var isPathShared = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;

    var rootPath = isPathShared ? _utils.ROOT_PATH.DRIVE : _utils.ROOT_PATH.APP;
    var url = _utils.SERVER + (isFile ? 'nfs/file/metadata/' : 'nfs/directory/') + rootPath + '/' + path;

    var payload = {
        method: 'PUT',
        headers: {
            'Authorization': 'Bearer ' + token,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            name: newName
        })
    };

    if (metadata) {
        payload.headers.Metadata = metadata;
    }

    return (0, _isomorphicFetch2.default)(url, payload).then(function (response) {
        return (0, _utils.checkBooleanResponse)(response);
    });
};

var renameDir = exports.renameDir = function renameDir(token, dirPath, newName, metadata) {
    var isPathShared = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    return rename(token, dirPath, newName, false, metadata, isPathShared);
};

var renameFile = exports.renameFile = function renameFile(token, oldPath, newName, metadata) {
    var isPathShared = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

    return rename(token, oldPath, newName, true, metadata);
};